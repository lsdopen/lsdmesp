SET 'auto.offset.reset' = 'earliest';

CREATE STREAM customers_stream WITH (KAFKA_TOPIC = 'postgres.bank.customers',VALUE_FORMAT = 'AVRO', KEY_FORMAT ='AVRO');
CREATE STREAM accounts_stream WITH (KAFKA_TOPIC = 'postgres.bank.accounts',VALUE_FORMAT = 'AVRO', KEY_FORMAT ='AVRO');

CREATE TABLE customers WITH (kafka_topic='customers', FORMAT='AVRO') AS
 SELECT customer_id AS customer_id,
     LATEST_BY_OFFSET(first_name) AS first_name,
     LATEST_BY_OFFSET(last_name) AS last_name,
     LATEST_BY_OFFSET(phone_number) AS phone_number,
     LATEST_BY_OFFSET(email_address) AS email_address
 FROM customers_stream
 GROUP BY customer_id;

CREATE TABLE accounts WITH (kafka_topic='accounts', FORMAT='AVRO') AS
 SELECT card_number AS card_number,
     LATEST_BY_OFFSET(account_id) AS account_id,
     LATEST_BY_OFFSET(customer_id) AS customer_id
 FROM accounts_stream
 GROUP BY card_number;

CREATE TABLE customers_accounts WITH (kafka_topic='customers_accounts',FORMAT='AVRO') AS
SELECT
   C.CUSTOMER_ID AS CUSTOMER_ID,
   C.FIRST_NAME + ' ' + C.LAST_NAME AS FULL_NAME,
   C.PHONE_NUMBER,
   C.EMAIL_ADDRESS,
   A.ACCOUNT_ID,
   A.CARD_NUMBER
FROM accounts A
INNER JOIN customers C
ON A.CUSTOMER_ID = C.CUSTOMER_ID;

CREATE STREAM jdbc_bank_transactions_rekeyed
WITH (KAFKA_TOPIC='jdbc_bank_transactions_rekeyed', KEY_FORMAT='AVRO', VALUE_FORMAT='AVRO') AS
   SELECT `card_number` as card_number, `transaction_id` as transaction_id, `transaction_amount` as transaction_amount, `transaction_time` as transaction_time
   FROM jdbc_bank_transactions
   PARTITION BY `card_number`
EMIT CHANGES;

CREATE STREAM jdbc_bank_transactions_enriched WITH (KAFKA_TOPIC = 'jdbc_bank_transactions_enriched', KEY_FORMAT = 'AVRO', VALUE_FORMAT='AVRO') AS
 SELECT
     T.CARD_NUMBER AS CARD_NUMBER,
     T.TRANSACTION_ID,
     T.TRANSACTION_AMOUNT,
     T.TRANSACTION_TIME,
     C.FULL_NAME,
     C.PHONE_NUMBER,
     C.EMAIL_ADDRESS
 FROM jdbc_bank_transactions_rekeyed T
 LEFT JOIN customers_accounts C
 ON C.CARD_NUMBER = T.CARD_NUMBER;
