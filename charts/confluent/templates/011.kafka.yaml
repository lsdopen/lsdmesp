{{- $kafka := .Values.lsdmesp.confluent.kafka -}}
{{- if $kafka.enabled -}}
apiVersion: platform.confluent.io/v1beta1
kind: Kafka
metadata:
  name: kafka
  namespace: {{ .Release.Namespace }}
spec:
  authorization:
    type: rbac
    superUsers:
      - User:kafka
      - User:cf_kafka
  configOverrides:
    jvm:
    - -Xms{{ $kafka.jvm.Xms }}
    - -Xmx{{ $kafka.jvm.Xmx }}
    server:
    - auto.create.topics.enable=true
    - delete.topic.enable=true
    - num.partitions={{ .Values.lsdmesp.defaultNumPartitions }}
    - min.insync.replicas={{ .Values.lsdmesp.defaultMinInSyncReplicas }}
    - default.replication.factor={{ .Values.lsdmesp.defaultReplicationFactor }}
    - confluent.license.topic.replication.factor={{ .Values.lsdmesp.defaultReplicationFactor }}
    - confluent.license.topic.min.isr={{ .Values.lsdmesp.defaultMinInSyncReplicas }}
    - offsets.topic.replication.factor={{ .Values.lsdmesp.defaultReplicationFactor }}
    - offsets.topic.min.isr={{ .Values.lsdmesp.defaultMinInSyncReplicas }}
    - transaction.state.log.replication.factor={{ .Values.lsdmesp.defaultReplicationFactor }}
    - transaction.state.log.min.isr={{ .Values.lsdmesp.defaultMinInSyncReplicas }}
    - confluent.cluster.link.metadata.topic.replication.factor={{ .Values.lsdmesp.defaultReplicationFactor }}
    - confluent.tier.metadata.replication.factor={{ .Values.lsdmesp.defaultReplicationFactor }}
    - confluent.balancer.topic.replication.factor={{ .Values.lsdmesp.defaultReplicationFactor }}
    - confluent.metadata.topic.replication.factor={{ .Values.lsdmesp.defaultReplicationFactor }}
    - confluent.metrics.reporter.topic.min.isr={{ .Values.lsdmesp.defaultMinInSyncReplicas }}
    - confluent.security.event.logger.exporter.kafka.topic.replicas={{ .Values.lsdmesp.defaultReplicationFactor }}
    - log.retention.ms=86400000
    - ldap.search.mode=GROUPS
  dataVolumeCapacity: {{ $kafka.dataVolumeCapacity }}
  dependencies:
    kafkaRest:
      authentication:
        type: bearer
        bearer:
          directoryPathInContainer: /vault/secrets
    kRaftController:
      clusterRef:
        name: kraftcontroller
      controllerListener:
        tls:
          enabled: true
        authentication:
          principalMappingRules:
          - RULE:.*CN[\s]?=[\s]?([a-zA-Z0-9.]*)?.*/$1/
          type: mtls
  image:
    application: confluentinc/cp-server:{{ .Values.lsdmesp.cpVersion }}
    init: confluentinc/confluent-init-container:{{ .Values.lsdmesp.cpOperatorVersion }}
  listeners:
    internal:
      authentication:
        principalMappingRules:
        - RULE:.*CN[\s]?=[\s]?([a-zA-Z0-9.]*)?.*/$1/
        type: mtls
      tls:
        enabled: true
    replication:
      authentication:
        principalMappingRules:
        - RULE:.*CN[\s]?=[\s]?([a-zA-Z0-9.]*)?.*/$1/
        type: mtls
      tls:
        enabled: true
    external:
      {{- if $kafka.ingress.enabled }}
      externalAccess:
        type: staticForHostBasedRouting
        staticForHostBasedRouting:
          domain: {{ $kafka.ingress.baseDomain }}
          brokerPrefix: kafka-broker-
          port: 443
      {{- else -}}
      {{- if $kafka.externalAccess }}
      externalAccess:
        {{ toYaml $kafka.externalAccess | nindent 8 }}
      {{- end }}
      {{- end }}
      authentication:
        type: ldap
      tls:
        enabled: true
  metricReporter:
    authentication:
      type: mtls
    enabled: true
    replicationFactor: {{ .Values.lsdmesp.defaultReplicationFactor }}
    tls:
      enabled: true
  oneReplicaPerNode: true
  podTemplate:
    serviceAccountName: default
    annotations:
      vault.hashicorp.com/agent-inject: "true"
      vault.hashicorp.com/agent-inject-status: update
      vault.hashicorp.com/preserve-secret-case: "true"
      vault.hashicorp.com/agent-run-as-user: "0"
      vault.hashicorp.com/agent-run-as-group: "1000"
      vault.hashicorp.com/agent-inject-secret-kafka-bearer: secret/lsdmesp-confluent/kafka/bearer.txt
      vault.hashicorp.com/agent-inject-file-kafka-bearer: bearer.txt
      vault.hashicorp.com/agent-inject-template-kafka-bearer: |
        {{`{{- with secret "secret/lsdmesp-confluent/kafka/bearer.txt" -}}
        {{ .Data.data.bearer | base64Decode }}{{- end -}}`}}
      vault.hashicorp.com/agent-inject-secret-mds-publickey: secret/lsdmesp-confluent/mds/mdsPublicKey.pem
      vault.hashicorp.com/agent-inject-file-mds-publickey: mdsPublicKey.pem
      vault.hashicorp.com/agent-inject-template-mds-publickey: |
        {{`{{- with secret "secret/lsdmesp-confluent/mds/mdsPublicKey.pem" -}}
        {{ .Data.data.mdspublickey | base64Decode }}{{- end -}}`}}
      vault.hashicorp.com/agent-inject-secret-mds-tokenkeypair: secret/lsdmesp-confluent/mds/mdsTokenKeyPair.pem
      vault.hashicorp.com/agent-inject-file-mds-tokenkeypair: mdsTokenKeyPair.pem
      vault.hashicorp.com/agent-inject-template-mds-tokenkeypair: |
        {{`{{- with secret "secret/lsdmesp-confluent/mds/mdsTokenKeyPair.pem" -}}
        {{ .Data.data.mdstokenkeypair | base64Decode }}{{- end -}}`}}
      vault.hashicorp.com/agent-inject-secret-ldap-simple: secret/lsdmesp-confluent/mds/ldap.txt
      vault.hashicorp.com/agent-inject-file-ldap-simple: ldap.txt
      vault.hashicorp.com/agent-inject-template-ldap-simple: |
        {{`{{- with secret "secret/lsdmesp-confluent/mds/ldap.txt" -}}
        {{ .Data.data.ldapsimple | base64Decode }}{{- end -}}`}}
      vault.hashicorp.com/role: confluent-operator
    podSecurityContext:
      fsGroup: 1000
      runAsUser: 1000
      runAsGroup: 1000
      runAsNonRoot: true
    resources:
      {{- toYaml $kafka.resources | nindent 6 }}
  replicas: {{ $kafka.replicas }}
  services:
    mds:
      # Configure this with TLS encryption, but not with external access through a load balancer.
      # For external access to MDS, an ingress controller can be used.
      tls:
        enabled: true
      tokenKeyPair:
        directoryPathInContainer: /vault/secrets
      provider:
        type: ldap
        ldap:
          address: ldap://ldap.{{ .Release.Namespace }}.svc.cluster.local:389
          authentication:
            type: simple
            simple:
              directoryPathInContainer: /vault/secrets
          configurations:
            groupNameAttribute: cn
            groupObjectClass: groupOfNames
            groupMemberAttribute: member
            groupMemberAttributePattern: cn=(.*),ou=users,{{ .Values.lsdmesp.ldap.basedn }}
            groupSearchBase: ou=groups,{{ .Values.lsdmesp.ldap.basedn }}
            groupSearchScope: 1
            userNameAttribute: cn
            userObjectClass: organizationalRole
            userSearchBase: {{ .Values.lsdmesp.ldap.basedn }}
            userSearchScope: 2
  storageClass:
    name: {{ .Values.lsdmesp.storageClass }}
  tls:
    autoGeneratedCerts: true
{{- end -}}
