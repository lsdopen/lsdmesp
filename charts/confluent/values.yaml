lsdmesp:
  clusterType: "kind"
  cpVersion: "7.6.0"
  cpOperatorVersion: "2.8.0"
  storageClass: standard
  defaultReplicationFactor: 3
  defaultMinInSyncReplicas: 2
  defaultNumPartitions: 6

  security:
    enabledDemo: true
    vault:
      enabled: false
      type: kv-v2
      mount: kvv2
      subPath: confluent
      auth:
        name: static-auth
        mount: demo-auth-mount
        kubernetes:
          role: role1
          serviceAccount: default
          audiences:
            - vault

  armyKnife:
    enabled: true
    image: lsdopen/kafka-army-knife:latest
    replicas: 1

  confluentCli:
    enabled: true
    replicas: 0

  tls:
    ca:
      cert: ""
      key: ""
    mds:
      key: ""
      publicKey: ""

  ldap:
    # if `true`, then will be provisioned
    enabled: true
    readOnlyUser:
      username: "mds"
      password: ""
    image: osixia/openldap:1.5.0
    tls:
      enabled: false
      fullchain: |-
      privkey: |-
      cacerts: |-
    organisation: "Test Inc."
    domain: "test.com"
    admin_password: ""
    config_password: ""
    basedn: "dc=test,dc=com"
    env: {}

    # Add additional ldifs to the core confluent ones
    extra_ldifs: 
      07_cf_support.ldif: |-
        dn: cn=bob,ou=users,{{ LDAP_BASE_DN }}
        userPassword: bob-secret
        description: Example user
        objectClass: simpleSecurityObject
        objectClass: organizationalRole
        cn: bob

        dn: cn=dave,ou=users,{{ LDAP_BASE_DN }}
        userPassword: dave-secret
        description: Example user
        objectClass: simpleSecurityObject
        objectClass: organizationalRole
        cn: dave

        dn: cn=peter,ou=users,{{ LDAP_BASE_DN }}
        userPassword: peter-secret
        description: Example user
        objectClass: simpleSecurityObject
        objectClass: organizationalRole
        cn: peter

        dn: cn=jane,ou=users,{{ LDAP_BASE_DN }}
        userPassword: jane-secret
        description: Example user
        objectClass: simpleSecurityObject
        objectClass: organizationalRole
        cn: jane

        dn: cn=TeamBlueRead,ou=groups,{{ LDAP_BASE_DN }}
        cn: TeamBlueRead
        objectClass: groupOfNames
        member: cn=bob,ou=users,{{ LDAP_BASE_DN }}
        member: cn=jane,ou=users,{{ LDAP_BASE_DN }}

        dn: cn=TeamBlueWrite,ou=groups,{{ LDAP_BASE_DN }}
        cn: TeamBlueWrite
        objectClass: groupOfNames
        member: cn=bob,ou=users,{{ LDAP_BASE_DN }}
        member: cn=dave,ou=users,{{ LDAP_BASE_DN }}

        dn: cn=TeamBlueAdmin,ou=groups,{{ LDAP_BASE_DN }}
        cn: TeamBlueAdmin
        objectClass: groupOfNames
        member: cn=peter,ou=users,{{ LDAP_BASE_DN }}

  confluent:
    kraftcontroller:
      # java memory sizes
      jvm:
        Xms: 384m
        Xmx: 384m
      # size of the pv needed
      dataVolumeCapacity: 1Gi
      # pod resource limits and request
      resources:
        limits:
          cpu: 500m
          memory: 1Gi
        requests:
          cpu: 20m
          memory: 512Mi
      # number of pod replicas
      replicas: 3

    kafka:
      # if `true`, then will be provisioned
      enabled: true
      # credential config
      username: cf_kafka
      password: ""
      # java memory sizes
      jvm:
        Xms: 1g
        Xmx: 1g
      # size of the pv needed
      dataVolumeCapacity: 20Gi
      # pod resource limits and request
      resources:
        limits:
          cpu: 1
          memory: 8Gi
        requests:
          cpu: 50m
          memory: 3Gi
      # number of pod replicas
      replicas: 3
      externalAccess: {}
      ingress:
        # -- Specifies whether an ingress for Kafka should be created
        enabled: false
        ingressClassName: "nginx"
        # -- Annotations for the Kafka ingress
        annotations: {}
        # -- Base domain configuration for the Kafka and brokers ingress ingress
        baseDomain: "example.com"
        # -- TLS host configuration will be dynamically built based on the base domain. You can change the secret name here.
        tls:
          secretName: kafka-tls

    kafkarestclass:
      # if `true`, then will be provisioned
      enabled: true

    schemaregistry:
      # if `true`, then will be provisioned
      enabled: true
      # credential config
      username: cf_schemaregistry
      password: ""
      # java memory sizes
      jvm:
        Xms: 384m
        Xmx: 384m
      # pod resource limits and request
      resources:
        limits:
          cpu: 200m
          memory: 1Gi
        requests:
          cpu: 10m
          memory: 512Mi
      # number of pod replicas
      replicas: 1
      externalAccess: {}
      ingress:
        # -- Specifies whether an ingress for Schema Registry should be created
        enabled: false
        ingressClassName: "nginx"
        # -- Annotations for the Schema Registry ingress
        annotations: {}
        # -- Base domain configuration for the  Schema Registry ingress
        baseDomain: "example.com"
        # -- TLS host configuration will be dynamically built based on the base domain. You can change the secret name here.
        tls:
          secretName: schemaregistry-tls

    connect:
      # if `true`, then will be provisioned
      enabled: true
      # credential config
      username: cf_connect
      password: ""
      # java memory sizes
      jvm:
        Xms: 512m
        Xmx: 512m
      # pod resource limits and request
      resources:
        limits:
          cpu: 1
          memory: 2Gi
        requests:
          cpu: 20m
          memory: 1Gi
      # number of pod replicas
      replicas: 1
      externalAccess: {}
      ingress:
        # -- Specifies whether an ingress for Connect should be created
        enabled: false
        ingressClassName: "nginx"
        # -- Annotations for the Connect ingress
        annotations: {}
        # -- Base domain configuration for the  Connect ingress
        baseDomain: "example.com"
        # -- TLS host configuration will be dynamically built based on the base domain. You can change the secret name here.
        tls:
          secretName: connect-tls

    ksqldb:
      # if `true`, then will be provisioned
      enabled: true
      # credential config
      username: cf_ksqldb
      password: ""
      # java memory sizes
      jvm:
        Xms: 512m
        Xmx: 512m
      # size of the pv needed
      dataVolumeCapacity: 5Gi
      # pod resource limits and request
      resources:
        limits:
          cpu: 1
          memory: 2Gi
        requests:
          cpu: 100m
          memory: 1Gi
      # number of pod replicas
      replicas: 1
      externalAccess: {}
      ingress:
        # -- Specifies whether an ingress for KSQLDB should be created
        enabled: false
        ingressClassName: "nginx"
        # -- Annotations for the KSQLDB ingress
        annotations: {}
        # -- Base domain configuration for the KSQLDB ingress
        baseDomain: "example.com"
        # -- TLS host configuration will be dynamically built based on the base domain. You can change the secret name here.
        tls:
          secretName: ksqldb-tls

    kafkarestproxy:
      # if `true`, then will be provisioned
      enabled: true
      # credential config
      username: cf_restproxy
      password: ""
      # java memory sizes
      jvm:
        Xms: 384m
        Xmx: 384m
      # pod resource limits and request
      resources:
        limits:
          cpu: 500m
          memory: 1Gi
        requests:
          cpu: 10m
          memory: 512Mi
      # number of pod replicas
      replicas: 1

    controlcenter:
      # if `true`, then will be provisioned
      enabled: true
      # credential config
      username: cf_controlcenter
      password: ""
      # java memory sizes
      jvm:
        Xms: 2g
        Xmx: 2g
      # size of the pv needed
      dataVolumeCapacity: 10Gi
      # pod resource limits and request
      resources:
        limits:
          cpu: 2
          memory: 12Gi
        requests:
          cpu: 200m
          memory: 6Gi
      # number of pod replicas
      replicas: 1
      externalAccess: {}
      ingress:
        # -- Specifies whether an ingress for Control Center should be created
        enabled: false
        ingressClassName: "nginx"
        # -- Annotations for the Control Center ingress
        annotations: {}
        # -- Base domain configuration for the Control Center ingress
        baseDomain: "apps.mesp.lsdopen.io"
        # -- TLS host configuration will be dynamically built based on the base domain. You can change the secret name here.
        tls:
          secretName: controlcenter-tls

confluent-for-kubernetes:
  name: confluent-operator
  licenseKey: ""
  license:
    secretRef: ""
    directoryPathInContainer: ""
  managedCerts:
    enabled: false
    caCertificate:
      secretRef: ""
      directoryPathInContainer: ""
    certDurationInDays: 60
    renewBeforeInDays: 30
    sans: ""
  imagePullSecretRef:  confluent-registry
  image:
    registry: docker.io
    repository: confluentinc/confluent-operator
    pullPolicy: IfNotPresent
    tag: "0.921.2"
  priorityClassName: ""
  replicas: 1
  namespaced: true
  namespaceList: []
  resources:
    limits:
      cpu: 500m
      memory: 512Mi
    requests:
      cpu: 100m
      memory: 256Mi
  terminationGracePeriodSeconds: 30
  debug: false
  affinity: {}
  tolerations: []
  podSecurity:
    enabled: true
    securityContext:
      fsGroup: 1001
      runAsUser: 1001
      runAsNonRoot: true
  containerSecurity:
    enabled: false
    securityContext: {}
  serviceAccount:
    create: true
    name: ""
  rbac: true
  clusterRole:
    openshift: false
  telemetry:
    enabled: false
    proxy:
      enabled: false
      credentialRequired: false
    secretRef: ""
    directoryPathInContainer: ""
  kRaftEnabled: true
  webhooks:
    enabled: false
    port: 8443
    tls:
      secretRef: ""
      directoryPathInContainer: ""
  pod:
    annotations:
      prometheus.io/path: "/metrics"
      prometheus.io/port: "7778"
      prometheus.io/scrape: "true"
    labels: {}
  licenseSecretRef: ""
  mountedVolumes:
    volumes: []
    volumeMounts: []
